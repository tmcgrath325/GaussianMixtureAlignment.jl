var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GaussianMixtureAlignment","category":"page"},{"location":"#GaussianMixtureAlignment","page":"Home","title":"GaussianMixtureAlignment","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GaussianMixtureAlignment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GaussianMixtureAlignment]","category":"page"},{"location":"#GaussianMixtureAlignment.GaussianMixtureAlignment","page":"Home","title":"GaussianMixtureAlignment.GaussianMixtureAlignment","text":"GaussianMixtureAlignment.jl\n\nGaussianMixtureAlignment.jl is a package used to align Gaussian mixture models. In particular, it uses an implementation of the GOGMA algorithm (Campbell, 2016) to find globally optimal alignments of mixtures of isotropic (spherical) Gaussian distributions.\n\nREPL help\n\n? followed by an algorithm or constructor name will print help to the terminal. See: \n\n\t?IsotropicGaussian \n\n\t?IsotropicGMM \n\n\t?IsotropicMultiGMM \n\n\t?gogma_align \n\n\t?tiv_gogma_align \n\n\t?rocs_align\n\n\n\n\n\n","category":"module"},{"location":"#GaussianMixtureAlignment.IsotropicGMM","page":"Home","title":"GaussianMixtureAlignment.IsotropicGMM","text":"A collection of IsotropicGaussians, making up a Gaussian Mixture Model (GMM).\n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.IsotropicGaussian","page":"Home","title":"GaussianMixtureAlignment.IsotropicGaussian","text":"A structure that defines an isotropic Gaussian distribution with the location of the mean, μ, standard deviation σ, and scaling factor ϕ.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.IsotropicMultiGMM","page":"Home","title":"GaussianMixtureAlignment.IsotropicMultiGMM","text":"A collection of labeled IsotropicGMMs, to each be considered separately during an alignment procedure. That is, only alignment scores between IsotropicGMMs with the same key are considered when aligning two MultiGMMs.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.MultiPointSet","page":"Home","title":"GaussianMixtureAlignment.MultiPointSet","text":"A collection of labeled point sets, to each be considered separately during an alignment procedure. That is,  only alignment scores between point sets with the same key are considered when aligning two MultiPointSets. \n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.Point","page":"Home","title":"GaussianMixtureAlignment.Point","text":"A coordinate position and a weight, to be used as part of a point set.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.PointSet","page":"Home","title":"GaussianMixtureAlignment.PointSet","text":"A point set made consisting of a matrix of coordinate positions with corresponding weights.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.UncertaintyRegion","page":"Home","title":"GaussianMixtureAlignment.UncertaintyRegion","text":"Describes an transformation uncertainty region centered at rotation R and translation T, with rotation and translation half-widths of σᵣ and σₜ respectively\n\n\n\n\n\n","category":"type"},{"location":"#GaussianMixtureAlignment.branchbound-Union{Tuple{TF}, Tuple{GaussianMixtureAlignment.AbstractModel, GaussianMixtureAlignment.AbstractModel}} where TF","page":"Home","title":"GaussianMixtureAlignment.branchbound","text":"result = branchbound(x, y; nsplits=2, searchspace=nothing,\n                     rot=nothing, trl=nothing, blockfun=fullBlock, objfun=alignment_objective,\n                     rtol=0.01, maxblocks=5e8, maxeva ls=Inf, maxstagnant=Inf, threads=false)\n\nFinds the globally optimal rigid transform for alignment between two isotropic Gaussian mixtures, x and y, using the GOGMA algorithm.\n\nReturns a GlobalAlignmentResult that contains the maximized overlap of the two GMMs (the upperbound on the objective function), a lower bound on the alignment objective function, an AffineMap which aligns x with y, and information about the number of evaluations during the alignment procedure.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.combine-Tuple{GaussianMixtureAlignment.AbstractSingleGMM, GaussianMixtureAlignment.AbstractSingleGMM}","page":"Home","title":"GaussianMixtureAlignment.combine","text":"gmm = combine(gmmx::IsotropicGMM, gmmy::IsotropicGMM)\nmgmm = combine(mgmmx::MultiGMM, mgmmy::MultiGMM)\ngmm = combine(gmms::Union{AbstractVector{<:IsotropicGMM},AbstractVector{<:MultiGMM}})\n\nCreates a new IsotropicGMM or MultiGMM by concatenating the vectors of IsotroicGaussians in the input GMMs. \n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.distance-Tuple{AbstractGMM, AbstractGMM}","page":"Home","title":"GaussianMixtureAlignment.distance","text":"l2dist = distance(x, y)\n\nCalculates the L2 distance between two GMMs made up of spherical Gaussian distributions.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.gauss_l2_bounds","page":"Home","title":"GaussianMixtureAlignment.gauss_l2_bounds","text":"lowerbound, upperbound = gauss_l2_bounds(x::Union{IsotropicGaussian, AbstractGMM}, y::Union{IsotropicGaussian, AbstractGMM}, σᵣ, σₜ)\nlowerbound, upperbound = gauss_l2_bounds(x, y, R::RotationVec, T::SVector{3}, σᵣ, σₜ)\n\nFinds the bounds for overlap between two isotropic Gaussian distributions, two isotropic GMMs, or two sets of  labeled isotropic GMMs for a particular region in 6-dimensional rigid rotation space, defined byR,T,σᵣandσₜ`.\n\nR and T represent the rotation and translation, respectively, that are at the center of the uncertainty region. If they are not provided,  the uncertainty region is assumed to be centered at the origin (i.e. x has already been transformed).\n\nσᵣ and σₜ represent the sizes of the rotation and translation uncertainty regions.\n\nSee Campbell & Peterson, 2016\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.inertial_transforms","page":"Home","title":"GaussianMixtureAlignment.inertial_transforms","text":"tforms = inertial_transforms(gmm)\n\nReturns 10 transformations to put gmm in an inertial frame. That is, the mass matrix of the GMM is made diagonal, and the GMM center of mass is made the origin.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.local_align-Tuple{GaussianMixtureAlignment.AbstractModel, GaussianMixtureAlignment.AbstractModel, GaussianMixtureAlignment.SearchRegion, Vararg{Any}}","page":"Home","title":"GaussianMixtureAlignment.local_align","text":"obj, pos = local_align(x, y, block, pσ=nothing, pϕ=nothing; R=nothing, T=nothing, maxevals=100)\n\nPerforms local alignment within the specified block using L-BFGS to minimize objective function objfun for the provided GMMs, x and y.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.mass_matrix","page":"Home","title":"GaussianMixtureAlignment.mass_matrix","text":"m = second_moment(gmm, center, dim1, dim2)\n\nReturns the second order moment of gmm\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.overlap","page":"Home","title":"GaussianMixtureAlignment.overlap","text":"ovlp = overlap(x::AbstractMultiGMM, y::AbstractMultiGMM)\n\nCalculates the unnormalized overlap between two AbstractMultiGMM objects.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.overlap-2","page":"Home","title":"GaussianMixtureAlignment.overlap","text":"ovlp = overlap(x::IsotropicGaussian, y::IsotropicGaussian)\n\nCalculates the unnormalized overlap between two IsotropicGaussian objects.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.overlap-3","page":"Home","title":"GaussianMixtureAlignment.overlap","text":"ovlp = overlap(x::AbstractSingleGMM, y::AbstractSingleGMM)\n\nCalculates the unnormalized overlap between two AbstractSingleGMM objects.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.overlap-NTuple{5, Real}","page":"Home","title":"GaussianMixtureAlignment.overlap","text":"ovlp = overlap(dist, σx, σy, ϕx, ϕy)\n\nCalculates the unnormalized overlap between two Gaussian distributions with variances σx and σy, weights ϕx and ϕy, and means separated by distance dist.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.overlap-Tuple{Real, Real, Real}","page":"Home","title":"GaussianMixtureAlignment.overlap","text":"ovlp = overlap(distsq, s, w)\n\nCalculates the unnormalized overlap between two Gaussian distributions with width s, weight w', and squared distancedistsq`.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.rocs_align-Tuple{AbstractGMM, AbstractGMM}","page":"Home","title":"GaussianMixtureAlignment.rocs_align","text":"score, tform, nevals = rocs_align_gmms(gmmfixed, gmmmoving; maxevals=1000)\n\nFinds the optimal alignment between the two supplied GMMs using steric multipoles, based on the ROCS alignment algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.rot_branchbound-Tuple{GaussianMixtureAlignment.AbstractModel, GaussianMixtureAlignment.AbstractModel}","page":"Home","title":"GaussianMixtureAlignment.rot_branchbound","text":"result = rot_gogma_align(x, y; kwargs...)\n\nFinds the globally optimal rotation for alignment between two isotropic Gaussian mixtures, x and y, using the GOGMA algorithm, for a given rotation, rot. That is, only rigid translation is allowed.\n\nFor details about keyword arguments, see gogma_align().\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.subranges","page":"Home","title":"GaussianMixtureAlignment.subranges","text":"sbrngs = subranges(ranges, nsplits)\n\nTakes ranges, a nested tuple describing intervals for each dimension in rigid-transformation space defining a hypercube, and splits the hypercube into nsplits even components along each dimension. If the cube is N-dimensional, the number of returned sub-cubes will be nsplits^N.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.tanimoto-Tuple{AbstractGMM, AbstractGMM}","page":"Home","title":"GaussianMixtureAlignment.tanimoto","text":"tani = tanimoto(x, y)\n\nCalculates the tanimoto distance based on Gaussian overlap between two GMMs.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.tight_distance_bounds","page":"Home","title":"GaussianMixtureAlignment.tight_distance_bounds","text":"lb, ub = tight_distance_bounds(x::SVector{3,<:Number}, y::SVector{3,<:Number}, σᵣ::Number, σₜ::Number)\nlb, ub = tight_distance_bounds(x::SVector{3,<:Number}, y::SVector{3,<:Number}, R::RotationVec, T<:SVector{3}, σᵣ::Number, σₜ::Number)\n\nWithin an uncertainty region, find the bounds on distance between two points x and y. \n\nSee Campbell & Peterson, 2016\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.tivgmm","page":"Home","title":"GaussianMixtureAlignment.tivgmm","text":"tgmm = tivgmm(gmm::IsotropicGMM, c=Inf)\ntgmm = tivgmm(mgmm::MultiGMM, c=Inf)\n\nReturns a new IsotropicGMM or MultiGMM containing up to c*length(gmm) translation invariant vectors (TIVs) connecting Gaussian means in gmm. TIVs are chosen to maximize length multiplied by the weights of the connected distributions. \n\nSee Li et. al. (2019) for a description of TIV construction.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.tivpointset","page":"Home","title":"GaussianMixtureAlignment.tivpointset","text":"tset = tivpointset(ps::PointSet, c=Inf)\ntset = tivpointset(mps::MultiPointSet, c=Inf)\n\nReturns a new PointSet or MultiPointSet containing up to c*length(gmm) translation invariant vectors (TIVs) connecting point coordinates in the input model. TIVs are chosen to maximize length multiplied by the weights of the connected distributions. \n\nSee Li et. al. (2019) for a description of TIV construction.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianMixtureAlignment.translation_limit-Tuple{AbstractMatrix, AbstractMatrix}","page":"Home","title":"GaussianMixtureAlignment.translation_limit","text":"lim = translation_limit(gmmx, gmmy)\n\nComputes the largest translation needed to ensure that the searchspace contains the best alignment transformation.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianMixtureAlignment.trl_branchbound-Tuple{GaussianMixtureAlignment.AbstractModel, GaussianMixtureAlignment.AbstractModel}","page":"Home","title":"GaussianMixtureAlignment.trl_branchbound","text":"result = trl_gogma_align(x, y; kwargs...)\n\nFinds the globally optimal translation for alignment between two isotropic Gaussian mixtures, x and y, using the GOGMA algorithm, for a given translation, trl. That is, only rigid rotation is allowed.\n\nFor details about keyword arguments, see gogma_align().\n\n\n\n\n\n","category":"method"}]
}
